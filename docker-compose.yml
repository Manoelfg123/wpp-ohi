version: '3.8'

services:
  # Serviço principal da API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-saas-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    volumes:
      - ./sessions:/app/sessions # Volume persistente para as sessões do WhatsApp
      - ./src:/app/src # Código fonte para documentação Swagger
      - ./dist:/app/dist # Arquivos compilados
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - API_KEY=${API_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-whatsapp_saas}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_EVENTS_QUEUE=${RABBITMQ_EVENTS_QUEUE:-platform_events}
      - WHATSAPP_RECONNECT_INTERVAL=${WHATSAPP_RECONNECT_INTERVAL:-10000}
      - WHATSAPP_MAX_RETRIES=${WHATSAPP_MAX_RETRIES:-5}
      - WHATSAPP_QR_TIMEOUT=${WHATSAPP_QR_TIMEOUT:-60000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: whatsapp-saas-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-whatsapp_saas}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-whatsapp_saas}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: whatsapp-saas-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Message Broker RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: whatsapp-saas-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management interface port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

# Volumes persistentes
volumes:
  postgres_data:
    name: whatsapp-saas-postgres-data
  redis_data:
    name: whatsapp-saas-redis-data
  rabbitmq_data:
    name: whatsapp-saas-rabbitmq-data
